{"version":3,"file":"style.js","sources":["src/api/create.js","src/api/css.js","src/build/cache.js","src/build/get-block-string.js","src/build/get-class-name.js","src/build/get-rules.js","src/build/get-style.js","src/build/get-selectors-string.js","src/build/get-styles.js","src/build/get-supports-string.js","src/client/can-use-dom.js","src/client/get-style-element.js","src/client/update.js","src/client/update-styles.js","src/flatten/flatten-input.js","src/flatten/get-shorthand.js","src/flatten/get-shorthands.js","src/flatten/is-shorthand.js","src/flatten/is-variable.js","src/flatten/replace-variables.js","src/flatten/get-variables.js","src/flatten/set-store.js","src/flatten/set-variable.js","src/merge/assign-prop.js","src/merge/clone-obj.js","src/merge/can-merge.js","src/merge/empty-obj.js","src/merge/merge.js","src/merge/merge-arr.js","src/merge/merge-arr-of-obj.js","src/merge/merge-obj.js","src/merge/sort-json.js","src/modify/is-font-face.js","src/modify/parse-fallbacks.js","src/modify/get-prefixes.js","src/modify/parse-font-face.js","src/modify/parse-properties.js","src/modify/is-property.js","src/parse/get-conditionals.js","src/parse/get-placeholders.js","src/parse/is-conditional.js","src/parse/is-placeholder.js","src/parse/parse.js","src/parse/parse-input.js","src/parse/parse-selectors.js","src/parse/is-selector.js","src/parse/get-selectors.js","src/parse/get-ancestors.js","src/parse/parse-type-selector.js","src/parse/is-type-selector.js","src/parse/parse-placeholder.js","src/modify/modify-numbers.js","src/modify/parse-keyframes.js","src/modify/parse-self-selector.js","src/parse/parse-conditional.js","src/shared/default-params.js","src/shared/get-identifier.js","src/shared/get-media.js","src/shared/get-property-id.js","src/shared/store.js","src/typeof/get-type.js","src/typeof/is-arr.js","src/typeof/is-bool.js","src/typeof/is-fn.js","src/typeof/is-json.js","src/typeof/is-null.js","src/typeof/is-num.js","src/typeof/is-obj.js","src/typeof/is-str.js","src/typeof/is-sym.js","src/typeof/is-undef.js","src/utils/camel-case.js","src/utils/debounce.js","src/utils/get.js","src/utils/kebab-case.js","src/utils/murmur-hash.js","src/utils/nanoid.js","src/utils/to-pairs.js","src/utils/uniq.js"],"sourcesContent":["import { css, isArr, isFn, isObj, toPairs } from \"../index.js\"\n\n/**\n  Creates a JavaScript object containing keys as identifiers and class\n  names as values. If the value is a function, it is assigned to the\n  value as is, without executing.\n\n  @typedef {import (\"..\").PlainObject} PlainObject\n\n  @param {PlainObject} params\n  - Plain JavaScript object with keys containing CSS styles.\n\n  @returns {PlainObject}\n    Plain JavaScript object with keys as identifiers and class names or\n    functions as values.\n */\n\nexport function create (params = {}) {\n  return toPairs(params).reduce(\n    /**\n      Assigns resulting class names or functions to original keys.\n\n      @param {PlainObject} styles\n      - Object with keys as strings and values as class names or functions.\n\n      @param {[string, PlainObject | PlainObject[]]} style\n      - Key/value pair from original input.\n\n      @returns {PlainObject}\n        Object with keys as strings and values as class names or functions.\n     */\n\n    function (styles, style) {\n      const property = style[0]\n      const value = style[1]\n\n      if (isFn(value)) {\n        styles[property] = value\n      }\n\n      if (isArr(value) || isObj(value)) {\n        styles[property] = css(value)\n      }\n\n      return styles\n    },\n    {}\n  )\n}\n","/*\n  eslint-disable\n    jsdoc/check-indentation,\n    jsdoc/require-description-complete-sentence\n */\n\nimport {\n  cache,\n  getClassName,\n  isArr,\n  isStr,\n  nanoid,\n  parse,\n  uniq,\n  update\n} from \"../index.js\"\n\n/**\n  Parse styles, selectors, and shortcuts from an object or array of objects.\n  Styles will be de-duplicated, cached, and applied to the active web page.\n  Based on the styles input, a hashed string of class name(s) are returned.\n\n  @typedef {import (\".\").StylesObject} StylesObject\n\n  @param {StylesObject | (StylesObject | undefined)[]} input\n  - Plain JavaScript object or array of objects containing CSS styles.\n\n  - An array of objects will be deep merged, left to right with later\n    objects overwriting assignments of previous objects.\n\n  - Object keys can be:\n    - CSS [standard properties](https://www.w3.org/Style/CSS/all-properties.en.html) in camelCase\n    - styled-system [shorthand properties](https://styled-system.com/api)\n    - CSS [custom properties](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties) (i.e. CSS variables)\n    - any combination of [CSS selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors) including the `&` [nesting selector](https://www.w3.org/TR/css-nesting-1/#nest-selector)\n    - [media queries](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries)\n    - `$` prefixed variables in camelCase\n    - `%` prefixed placeholders in camelCase.\n\n  - Values can be strings, numbers, arrays, or objects.\n    - Strings are used as-is with the exception of `$` prefixed camelCase\n      variables which are replaced with their specified replacement string.\n    - Bare numbers are appended with `px` _except_ those CSS properties which\n      accept an integer as a value, e.g. zIndex, opacity, flexGrow, etc. See\n      [src/modify/modify-numbers.js](https://github.com/ptb/style/blob/develop/src/modify/modify-numbers.js#L21)\n      for specific details.\n    - Arrays are used to provide\n      [fallback values](https://modernweb.com/using-css-fallback-properties-for-better-cross-browser-compatibility/).\n    - Objects can contain media queries or nested styles under the parent\n      selector. Objects under `fontFamily` and `animationName` keys can be\n      used to create a\n      [`@font-face`](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face)\n      or\n      [`@keyframes`](https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes)\n      at-rules respectively, and return the created `fontFamily` or\n      `animationName` automatically.\n\n  @param {string | (string | undefined)[]} [className]\n  - Plain class name string or array of class name strings.\n\n  @returns {string}\n    A string of generated and input class names each separated by a space.\n */\n\nexport function css (input = {}, className = \"\") {\n  const group = nanoid()\n\n  const results = /** @type {string[]} */ (parse(\n    { input },\n    group,\n    true\n  )\n    .map(cache)\n    .map(function (style) {\n      return update(style, group)\n    })\n    .map(getClassName)\n    .concat(\n      isArr(className)\n        ? className.filter(Boolean).reduce(\n          /**\n            @param {string[]} items\n\n            @param {string | undefined} item\n\n            @returns {string[]}\n           */\n          function (items, item) {\n            return isArr(item) || isStr(item)\n              ? items.concat(isStr(item) ? item.split(\" \") : item)\n              : items\n          },\n          []\n        )\n        : className.split(\" \")\n    )\n    .filter(Boolean)\n    .sort())\n\n  return uniq(results).join(\" \")\n}\n","import {\n  get,\n  getBlockString,\n  getMedia,\n  getSupportsString,\n  isArr,\n  isStr,\n  merge,\n  setStore,\n  store\n} from \"../index.js\"\n\n/**\n  Checks if selector is cached.\n\n  @typedef {import (\"..\").AnyFunction} AnyFunction\n\n  @param {string[][]} input\n  - The value to test.\n\n  @returns {AnyFunction}\n    Returns partially applied function.\n */\n\nfunction findFn (input) {\n  /**\n    Checks if selector is cached.\n\n    @param {string[]} selector\n    - The value to test.\n\n    @returns {boolean}\n      Returns `true` if `selector` is cached, else `false`.\n   */\n\n  return function (selector) {\n    return isArr(selector) && isArr(input) && isArr(input[0])\n      ? selector.join(\"\") === input[0].join(\"\")\n      : false\n  }\n}\n\n/**\n  Sort the elements of the `selectors` array.\n\n  @param {string[]} a\n  - Array one to compare for alphabetization.\n\n  @param {string[]} b\n  - Array two to compare for alphabetization.\n\n  @returns {number}\n    The result of the comparison.\n */\n\nfunction sortFn (a, b) {\n  if (isStr(a[0]) && (/^:(root|where)/u).test(a[0])) {\n    return 1\n  }\n\n  if (isStr(b[0]) && (/^:(root|where)/u).test(b[0])) {\n    return -1\n  }\n\n  return a.join(\"\").localeCompare(b.join(\"\"))\n}\n\n/**\n  Get or set cache of common CSS style object using rule as key.\n\n  @typedef {import (\"..\").Params} Params\n\n  @param {Params} params\n  - This project's common exchange CSS style object.\n\n  @returns {Params}\n    This project's common exchange CSS style object.\n */\n\nexport function cache (params) {\n  const media = getMedia(get(params, \"conditional.media\"))\n  const input = params.selectors\n  const supports = get(params, \"conditional.supports\")\n\n  let key = getBlockString(params).join(\"\")\n\n  if (isArr(supports) && supports.length) {\n    key = \"@supports \".concat(\n      getSupportsString(supports),\n      \"{\",\n      key,\n      \"}\"\n    )\n  }\n\n  setStore(media)\n\n  if (store.get(media).has(key)) {\n    const style = store.get(media).get(key)\n\n    const selectors = style.selectors\n\n    const insertSelector =\n      isArr(input) &&\n      isArr(selectors) &&\n      selectors.findIndex(findFn(input)) < 0\n\n    store.get(media).set(\n      key,\n      merge(\n        params,\n        {\n          \"selectors\": null\n        },\n        {\n          \"selectors\": (insertSelector && isArr(selectors)\n            ? selectors.concat(input)\n            : selectors || []\n          ).sort(sortFn)\n        }\n      )\n    )\n  } else {\n    store.get(media).set(key, params)\n  }\n\n  return store.get(media).get(key)\n}\n","import {\n  defaultParams,\n  getPropertyId,\n  isArr,\n  isObj,\n  isStr,\n  kebabCase,\n  toPairs\n} from \"../index.js\"\n\n/**\n  Convert `block` property to a string.\n\n  @typedef {import (\"..\").Params} Params\n\n  @param {Params} params\n  - This project's common exchange CSS style object.\n\n  @param {boolean} custom\n  - True: Return a custom string for caching in certain circumstances.\n  - False: Return a default block string.\n\n  @returns {string[]}\n    CSS declaration string of style properties and rules.\n */\n\nexport function getBlockString (\n  params = defaultParams,\n  custom = false\n) {\n  const block = params.block\n\n  let sep = \";\"\n\n  return [\n    isArr(block)\n      ? block\n        .map(function (rule) {\n          return toPairs(rule).map(function (style) {\n            const property = style[0]\n            const value = style[1]\n\n            if (\n              custom &&\n                isStr(property) &&\n                (/^--[a-z]/u).test(property)\n            ) {\n              const results = (params.selectors || [])\n                .filter(function (selector) {\n                  const regex = new RegExp(\n                    [\n                      \"^\\\\.\",\n                      getPropertyId(property).toString(36)\n                    ].join(\"\"),\n                    \"u\"\n                  )\n\n                  return !regex.test(selector.join(\"\"))\n                })\n                .map(function (selector) {\n                  return selector\n                    .join(\"\")\n                    .concat(\"{\", kebabCase(property), \"}\")\n                })\n                .filter(Boolean)\n\n              if (results.length) {\n                return results\n              }\n            }\n\n            if (isObj(value)) {\n              const a = toPairs(value)\n                .map(function (b) {\n                  return kebabCase(b[0]).concat(\":\", b[1])\n                })\n                .join(\";\")\n\n              sep = \"\"\n\n              return \"\".concat(property, \"{\", a, \"}\")\n            }\n\n            return \"\".concat(property, \":\", value)\n          })\n        })\n        .join(sep)\n      : \"\"\n  ]\n}\n","import { defaultParams } from \"../index.js\"\n\n/**\n  Returns an `identifier` string if `emit` is true.\n\n  @typedef {import (\"..\").Params} Params\n\n  @param {Params} params\n  - This project's common exchange CSS style object.\n\n  @returns {string | null | undefined}\n    The `identifier` as a string.\n */\n\nexport function getClassName (params = defaultParams) {\n  const emit = params.emit\n  const identifier = params.identifier\n\n  return emit ? identifier : null\n}\n","import { getStyle } from \"../index.js\"\n\n/**\n  Process each cached ruleset and combine into a string.\n\n  @typedef {import (\"..\").Params} Params\n\n  @param {Params[]} rules\n  - This project's common exchange CSS style object.\n\n  @param {string} [media]\n  - Media query string.\n\n  @returns {string}\n    Combined cached CSS rulesets as a string.\n */\n\nexport function getRules (rules = [], media) {\n  /** @type {string[]} */\n  let styles = []\n\n  rules.forEach(\n    /** @param {Params} style */\n    function (style) {\n      styles.push(getStyle(style))\n    }\n  )\n\n  styles = styles.sort()\n\n  if (media) {\n    styles.unshift(\"@media \".concat(media, \"{\"))\n    styles.push(\"}\")\n  }\n\n  return styles.join(\"\")\n}\n","import {\n  defaultParams,\n  get,\n  getBlockString,\n  getMedia,\n  getSelectorsString,\n  getSupportsString,\n  isStr,\n  isUndef\n} from \"../index.js\"\n\n/**\n  Return complete CSS ruleset string from common exchange style object.\n\n  @typedef {import (\"..\").Params} Params\n\n  @param {Params} params\n  - This project's common exchange CSS style object.\n\n  @param {boolean} mq\n  - Include media query in ruleset string.\n\n  @returns {string}\n    A complete CSS ruleset string with optional media query.\n */\n\nexport function getStyle (params = defaultParams, mq = false) {\n  const block = getBlockString(params)\n  const media = mq && getMedia(get(params, \"conditional.media\"))\n  const property = params.property\n  const selectors = getSelectorsString(params)\n  const supports = getSupportsString(\n    get(params, \"conditional.supports\")\n  )\n\n  return isUndef(property) ||\n    (isStr(property) && (/^[%$]/u).test(property)) ||\n    selectors.length === 0 ||\n    block.length === 0\n    ? \"\"\n    : [\n      media ? \"@media \".concat(media, \"{\") : \"\",\n      supports ? \"@supports \".concat(supports, \"{\") : \"\",\n      getSelectorsString(params),\n      \"{\",\n      getBlockString(params),\n      \"}\",\n      supports ? \"}\" : \"\",\n      media ? \"}\" : \"\"\n    ].join(\"\")\n}\n","import { defaultParams, isArr } from \"../index.js\"\n\n/**\n  Process the `selectors` when value is an array.\n\n  @typedef {import (\"..\").Params} Params\n\n  @param {Params} params\n  - This project's common exchange CSS style object.\n\n  @returns {string}\n    A string of selectors joined with commas.\n */\n\nexport function getSelectorsString (params = defaultParams) {\n  const selectors = params.selectors\n\n  return isArr(selectors)\n    ? selectors\n      .map(\n        /**\n          @param {string[]} selector\n\n          @returns {string}\n         */\n        function (selector) {\n          return selector.join(\"\")\n        }\n      )\n      .filter(Boolean)\n      .join(\",\")\n    : \"\"\n}\n","import { getRules, store } from \"../index.js\"\n\n/**\n  Return combined cached CSS rulesets as a string.\n\n  @param {string} [mq]\n  - Media query string.\n\n  @returns {string}\n    Combined cached CSS rulesets as a string.\n */\n\nexport function getStyles (mq) {\n  /** @type {string[]} */\n  let results = []\n\n  if (mq) {\n    results = results.concat(getRules(store.get(mq)))\n  } else {\n    new Map([... store.entries()].sort()).forEach(function (\n      rules,\n      media\n    ) {\n      results = results.concat(getRules(rules, media))\n    })\n  }\n\n  return results\n    .filter(Boolean)\n    .sort()\n    .join(\"\")\n}\n","import { isArr, isStr, kebabCase, uniq } from \"../index.js\"\n\n/**\n  Join array of feature queries into a string.\n\n  @param {any} [value]\n  - Array of feature query strings.\n\n  @returns {string}\n    Returns a feature query string.\n */\n\nexport function getSupportsString (value) {\n  const supports = isArr(value)\n    ? uniq(\n      value\n        .map(function (s) {\n          return isStr(s) ? s.replace(/: +/gu, \":\").trim() : \"\"\n        })\n        .map(kebabCase)\n        .filter(Boolean)\n    ).sort()\n    : []\n\n  if (supports.length > 1) {\n    return \"(\".concat(supports.join(\" and \"), \")\")\n  }\n\n  return supports.join(\"\")\n}\n","/**\n  Tests if executing in a browser environment.\n\n  @returns {boolean}\n    Returns `true` if executing in a browser, else `false`.\n */\n\nexport function canUseDom () {\n  return Boolean(\n    typeof window !== \"undefined\" &&\n      window.document &&\n      window.document.createElement\n  )\n}\n","/**\n  @returns {HTMLStyleElement}\n */\n\nexport const getStyleElement = (function () {\n  /** @type {NodeListOf<HTMLStyleElement>} */\n  let styles\n\n  return function (media = \"\") {\n    const attr = \"data-creator\"\n    const value = \"@ptb/style\"\n\n    const query = \"style[\" + attr + \"='\" + value + \"']\"\n\n    if (typeof styles === \"undefined\") {\n      styles = document.querySelectorAll(query)\n    }\n\n    let style\n\n    for (style of styles) {\n      if (style.media === media) {\n        return style\n      }\n    }\n\n    style = document.createElement(\"style\")\n    style.setAttribute(attr, value)\n\n    if (media.length) {\n      style.media = media\n    }\n\n    document.head.appendChild(style)\n\n    styles = document.querySelectorAll(query)\n\n    return style\n  }\n})()\n","import {\n  canUseDom,\n  defaultParams,\n  get,\n  getMedia,\n  store,\n  updateStyles\n} from \"../index.js\"\n\n/**\n  Update styles if running in a browser environment and remove\n  the temporary self-selector group from the store singleton.\n\n  @typedef {import (\"..\").Params} Params\n\n  @param {Params} params\n  - This project's common exchange CSS style object.\n\n  @param {string} group\n  - Unique grouping ID string.\n\n  @returns {Params}\n    This project's common exchange CSS style object.\n */\n\nexport function update (params = defaultParams, group) {\n  const media = getMedia(get(params, \"conditional.media\"))\n\n  if (store.has(media) && store.get(media).has(group)) {\n    store.get(media).delete(group)\n  }\n\n  if (canUseDom()) {\n    updateStyles()\n  }\n\n  return params\n}\n","/*\n  eslint-disable\n    @typescript-eslint/no-unused-vars,\n    no-unused-vars\n*/\n\nimport {\n\n  // @ts-ignore\n  debounce,\n  getStyleElement,\n  getStyles\n} from \"../index.js\"\n\n/**\n  Updates `<style data-creator=\"@ptb/style\" />` element content.\n\n  @returns {void}\n */\n\nexport function updateStyles () {\n  getStyleElement().innerHTML = getStyles()\n} /* updateStyles */\n","import {\n  defaultParams,\n  get,\n  getMedia,\n  getShorthand,\n  isArr,\n  isObj,\n  isShorthand,\n  isVariable,\n  mergeArrOfObj,\n  replaceVariables,\n  setVariable,\n  toPairs\n} from \"../index.js\"\n\n/**\n  Process the `input` property of a CSS style object.\n\n  @typedef {import (\"..\").Params} Params\n\n  @typedef {import (\"..\").PlainObject} PlainObject\n\n  @param {Params} params\n  - This project's common exchange CSS style object.\n\n  @returns {PlainObject}\n    Object containing raw CSS styles.\n */\n\nexport function flattenInput (params = defaultParams) {\n  const rules = mergeArrOfObj(\n    isArr(params.input)\n      ? params.input.filter(Boolean)\n      : params.input || {}\n  )\n\n  const media = get(params, \"conditional.media\")\n  const mediaStr = getMedia(media)\n\n  return mergeArrOfObj(\n    toPairs(rules).reduce(\n      /**\n        @param {PlainObject[]} styles\n\n        @param {[string, any]} style\n\n        @returns {PlainObject[]}\n       */\n      function (styles, style) {\n        const property = style[0]\n        let value = style[1]\n\n        if (isVariable(value, false)) {\n          value = replaceVariables(value, mediaStr)\n        }\n\n        if (isArr(value)) {\n          value = value.map(function (val) {\n            return replaceVariables(val, mediaStr)\n          })\n        }\n\n        if (isVariable(property, true)) {\n          const input = mergeArrOfObj(\n            value === true\n              ? replaceVariables(property, mediaStr)\n              : setVariable({\n                \"conditional\": { media },\n                property,\n                value\n              })\n          )\n\n          return isObj(input)\n            ? styles.concat(flattenInput({ input }))\n            : styles\n        } else if (isVariable(property, false)) {\n          const input = replaceVariables(property, mediaStr)\n\n          return styles.concat({ [input]: value })\n        } else if (isShorthand(property)) {\n          return styles.concat(getShorthand(property, value))\n        }\n\n        return styles.concat({ [property]: value })\n      },\n      []\n    )\n  )\n}\n","import {\n  getShorthands,\n  isShorthand,\n  isStr,\n  isUndef,\n  mergeArrOfObj\n} from \"../index.js\"\n\n/**\n  Replace shorthand properties with their expanded equivalent.\n\n  @typedef {import (\"..\").PlainObject} PlainObject\n\n  @param {string} input\n  - Shorthand property string.\n\n  @param {any} value\n  - Provided input value.\n\n  @returns {PlainObject}\n    Object containing raw CSS styles.\n */\n\nexport function getShorthand (input, value) {\n  const shorthands = getShorthands()\n\n  let property = input\n\n  if (isShorthand(property)) {\n    if ((/^margin[HX]/u).test(property)) {\n      property = \"mx\"\n    } else if ((/^margin[VY]/u).test(property)) {\n      property = \"my\"\n    } else if ((/^padding[HX]/u).test(property)) {\n      property = \"px\"\n    } else if ((/^padding[VY]/u).test(property)) {\n      property = \"py\"\n    }\n\n    const properties =\n      /** @type {string | string[]} */ (shorthands[property])\n\n    if (isStr(properties)) {\n      return { [properties]: value }\n    }\n\n    return mergeArrOfObj(\n      properties.map(function (prop) {\n        return { [prop]: value }\n      })\n    )\n  }\n\n  return isUndef(property) ? {} : { [property]: value }\n}\n","import { isObj, merge, setStore, store } from \"../index.js\"\n\n/**\n  Returns styled-system shorthand properties and user provided `$properties`.\n\n  @typedef {import (\"..\").PlainObject} PlainObject\n\n  @returns {PlainObject}\n    An object containing shorthand keys and the properties they represent.\n */\n\nexport function getShorthands () {\n  setStore(\"\")\n\n  let variable = store.get(\"\").get(\"$properties\")\n\n  variable = isObj(variable) ? variable.value : {}\n\n  return merge(\n    {\n      \"bg\": \"backgroundColor\",\n      \"borderX\": [\"borderLeft\", \"borderRight\"],\n      \"borderY\": [\"borderBottom\", \"borderTop\"],\n      \"m\": \"margin\",\n      \"mb\": \"marginBottom\",\n      \"ml\": \"marginLeft\",\n      \"mr\": \"marginRight\",\n      \"mt\": \"marginTop\",\n      \"mx\": [\"marginLeft\", \"marginRight\"],\n      \"my\": [\"marginBottom\", \"marginTop\"],\n      \"p\": \"padding\",\n      \"pb\": \"paddingBottom\",\n      \"pl\": \"paddingLeft\",\n      \"pr\": \"paddingRight\",\n      \"pt\": \"paddingTop\",\n      \"px\": [\"paddingLeft\", \"paddingRight\"],\n      \"py\": [\"paddingBottom\", \"paddingTop\"],\n      \"size\": [\"height\", \"width\"]\n    },\n    variable\n  )\n}\n","import { getShorthands, isStr } from \"../index.js\"\n\n/**\n  Checks if `value` is a shorthand property.\n\n  @param {string} [value]\n  - The value to check.\n\n  @returns {boolean}\n    Returns `true` if `value` is a shorthand property, else `false`.\n */\n\nexport function isShorthand (value) {\n  return (\n    isStr(value) &&\n    ((/^(margin|padding)[HVXY]/u).test(value) ||\n      Object.keys(getShorthands()).indexOf(value) >= 0)\n  )\n}\n","import { isStr } from \"../index.js\"\n\n/**\n  Checks if `value` is a variable.\n\n  @param {any} [value]\n  - The value to check.\n\n  @param {boolean} [exact]\n  - True: Entire string matches. False: String contains variable.\n\n  @returns {boolean}\n    Returns `true` if `value` is a variable, else `false`.\n */\n\nexport function isVariable (value, exact = true) {\n  return (\n    isStr(value) &&\n    (exact\n      ? (/^\\$[A-Za-z.]+$/u).test(value)\n      : (/\\$[A-Za-z.]+/u).test(value))\n  )\n}\n","import {\n  get,\n  getVariables,\n  isObj,\n  isStr,\n  isVariable,\n  setStore,\n  store\n} from \"../index.js\"\n\n/**\n  Replace `$` variable(s) with stored value.\n\n  @typedef {import (\"..\").Params} Params\n\n  @param {any} input\n  - The value to process.\n\n  @param {string} [media]\n  - Media query string.\n\n  @returns {any}\n    Returns value with variable replaced with stored value.\n */\n\nexport function replaceVariables (input, media = \"\") {\n  if (isVariable(input, false)) {\n    setStore(media)\n\n    const variables = /** @type {RegExpMatchArray} */ (getVariables(\n      input\n    ))\n\n    return variables.reduce(function (result, variable) {\n      const paths = variable.split(\".\")\n      const item = store.get(media).get(paths.shift())\n\n      if (isObj(item)) {\n        const value = (/\\./u).test(variable)\n          ? get(item.value, paths)\n          : item.value\n\n        if (isStr(value)) {\n          return result.replace(variable, value)\n        }\n\n        if (isVariable(input, true)) {\n          return value\n        }\n      }\n\n      return result\n    }, input)\n  }\n\n  return input\n}\n","import { isStr } from \"../index.js\"\n\n/**\n  Returns `RegExpMatchArray` if `property` contains variables.\n\n  @param {any} [value]\n  - The value to check.\n\n  @returns {false | RegExpMatchArray | null}\n    Returns `RegExpMatchArray` containing variables.\n */\n\nexport function getVariables (value) {\n  return isStr(value) && value.match(/\\$[A-Za-z.]+/gu)\n}\n","import { isStr, store } from \"../index.js\"\n\n/**\n  Ensures `store` has `media` and optional `group` Map objects.\n\n  @param {string} media\n  - Media query string.\n\n  @param {string} [group]\n  - Unique grouping ID string.\n\n  @returns {void}\n */\n\nexport function setStore (media, group) {\n  if (isStr(media) && !store.has(media)) {\n    store.set(media, new Map())\n  }\n\n  if (isStr(group) && !store.get(media).has(group)) {\n    store.get(media).set(group, new Map())\n  }\n}\n","import {\n  defaultParams,\n  get,\n  getMedia,\n  isArr,\n  isObj,\n  isVariable,\n  merge,\n  setStore,\n  store\n} from \"../index.js\"\n\n/**\n  Set the variable `property` in the store.\n\n  @typedef {import (\"..\").Params} Params\n\n  @typedef {import (\"..\").PlainObject} PlainObject\n\n  @param {Params} params\n  - This project's common exchange CSS style object.\n\n  @returns {any}\n    The stored value for this variable.\n */\n\nexport function setVariable (params = defaultParams) {\n  const property = params.property\n  const value = params.value\n\n  if (isVariable(property, true) && value !== true) {\n    const media = getMedia(get(params, \"conditional.media\"))\n\n    setStore(media)\n\n    let item = store.get(media).get(property)\n\n    if (isObj(item)) {\n      item = isArr(value)\n        ? merge(item, { \"value\": null }, params)\n        : merge(item, params)\n    } else {\n      item = params\n    }\n\n    store.get(media).set(property, item)\n  }\n\n  return {}\n}\n","/**\n  Assigns `key` of `target` to `value`.\n\n  @typedef {import (\"..\").PlainObject} PlainObject\n\n  @param {PlainObject} target\n  - The destination object.\n\n  @param {PlainObject} source\n  - The source object.\n\n  @param {string | symbol} key\n  - The property name to assign.\n\n  @param {any} value\n  - The property value to assign.\n\n  @returns {PlainObject}\n    Returns `object`.\n */\n\nexport function assignProp (target, source, key, value) {\n  if ({}.propertyIsEnumerable.call(source, key)) {\n    target[key] = value\n  } else {\n    Object.defineProperty(target, key, {\n      \"configurable\": true,\n      \"enumerable\": false,\n      \"value\": value,\n      \"writable\": true\n    })\n  }\n\n  return target\n}\n","import { canMerge, emptyObj, merge } from \"../index.js\"\n\n/**\n  Creates a recursive clone of `value`.\n\n  @typedef {import (\"..\").PlainObject} PlainObject\n\n  @param {any | PlainObject} value\n  - The value to clone.\n\n  @returns {any | any[] | PlainObject}\n    Returns a recursive clone of `value`.\n */\n\nexport function cloneObj (value) {\n  return canMerge(value) ? merge(emptyObj(value), value) : value\n}\n","import { isArr, isObj } from \"../index.js\"\n\n/**\n  Checks if `value` can be merged.\n\n  @param {any} value\n  - The value to check.\n\n  @returns {boolean}\n    Returns `true` if `value` can be merged, else `false`.\n */\n\nexport function canMerge (value) {\n  return (\n    Boolean(value) &&\n    (isArr(value) || isObj(value)) &&\n    !(/^\\[object (?:Date|RegExp)\\]$/u).test(\n      Object.prototype.toString.call(value)\n    )\n  )\n}\n","import { isArr } from \"../index.js\"\n\n/**\n  Creates an empty `Array` or `Object`.\n\n  @typedef {import (\"..\").PlainObject} PlainObject\n\n  @param {any} [value]\n  - The value to check.\n\n  @returns {any[] | PlainObject}\n    Returns an empty `Object` or `Array` depending on `value`.\n */\n\nexport function emptyObj (value) {\n  return isArr(value) ? [] : {}\n}\n","/*\n  eslint-disable\n    jsdoc/check-param-names,\n */\n\nimport {\n  cloneObj,\n  emptyObj,\n  isArr,\n  isObj,\n  isUndef,\n  mergeArr,\n  mergeObj\n} from \"../index.js\"\n\n/**\n  Recursively merges own properties of source objects or arrays into a new\n  empty object or array. Array and plain object properties are merged\n  recursively. Other objects and value types are overridden by assignment.\n  Source objects are applied from left to right. Subsequent sources\n  overwrite property assignments of previous sources.\n\n  @typedef {import (\"..\").PlainObject} PlainObject\n\n  @param {... PlainObject | any} sources\n  - The source objects or arrays.\n\n  @returns {PlainObject | any[]}\n    Returns `object` or `array`.\n */\n\nexport function merge () {\n  const sources = Array.prototype.slice.call(arguments)\n  const initial = sources[0]\n\n  return sources.reduce(function (target, source) {\n    if (isUndef(source)) {\n      return target\n    } else if (isObj(initial) && isArr(source)) {\n      return merge(target, merge.apply(null, source))\n    } else if (isArr(source)) {\n      return mergeArr(target, source)\n    } else if (isObj(source)) {\n      return mergeObj(target, source)\n    }\n\n    return cloneObj(source)\n  }, emptyObj(initial))\n}\n","import { isArr } from \"../index.js\"\n\n/**\n  Merges values of `target` and `source` arrays. Does not change the\n  existing arrays, but instead returns the values as shallow copies.\n  If the `target` is not an array, only the `source` is returned.\n\n  @param {any} target\n  - The first array.\n\n  @param {any} source\n  - The second array.\n\n  @returns {any | any[]}\n    Returns a new array with values from `target` and `source` arrays.\n */\n\nexport function mergeArr (target, source) {\n  return isArr(target) && isArr(source)\n    ? target.concat(source)\n    : source\n}\n","import { isArr, isObj, merge } from \"../index.js\"\n\n/**\n  Merges objects from `value` array.\n\n  @typedef {import (\"..\").PlainObject} PlainObject\n\n  @param {PlainObject[] | any} [value]\n  - An array of objects.\n\n  @returns {PlainObject | any}\n    Returns a new array with value objects merged.\n */\n\nexport function mergeArrOfObj (value) {\n  if (\n    isArr(value) &&\n    value.every(function (obj) {\n      return isObj(obj)\n    })\n  ) {\n    return merge.apply(null, value)\n  }\n\n  return value\n}\n","/*\n  eslint-disable\n    compat/compat,\n    jsdoc/check-param-names\n */\n\nimport {\n  assignProp,\n  isObj,\n  isUndef,\n  merge,\n  mergeArr\n} from \"../index.js\"\n\n/**\n  Recursively merges own properties of source objects into a new empty\n  object. Plain object properties are merged recursively. Source objects\n  are applied from left to right. Subsequent sources overwrite property\n  assignments of previous sources.\n\n  @typedef {import (\"..\").PlainObject} PlainObject\n\n  @param {... PlainObject | any} sources\n  - The source objects.\n\n  @returns {PlainObject | any}\n    Returns `object`.\n */\n\nexport function mergeObj () {\n  const sources = Array.prototype.slice.call(arguments)\n\n  return sources.reduce(\n    /**\n      @typedef {import (\"..\").PlainObject} PlainObject\n\n      @param {PlainObject} output\n\n      @param {PlainObject} input\n\n      @returns {PlainObject}\n     */\n    function (output, input) {\n      return isObj(input)\n        ? mergeArr(\n          Object.getOwnPropertyNames(input),\n          Object.getOwnPropertySymbols(input)\n        ).reduce(\n          /**\n            @param {PlainObject} result\n\n            @param {string | symbol} key\n\n            @returns {PlainObject}\n           */\n          function (result, key) {\n            const value = isUndef(input[key])\n              ? input[key]\n              : merge(result[key], input[key])\n\n            return assignProp(result, input, key, value)\n          },\n          output\n        )\n        : input\n    },\n    {}\n  )\n}\n","import { emptyObj, isArr, isNull, isObj } from \"../index.js\"\n\n/**\n  Sorts `input` by object key.\n\n  @typedef {import (\"..\").PlainObject} PlainObject\n\n  @param {any} input\n  - The object to sort by key.\n\n  @returns {any}\n    Returns a new object sorted by key.\n */\n\nexport function sortJSON (input) {\n  if (isArr(input)) {\n    return input.map(function (item) {\n      return sortJSON(item)\n    })\n  }\n\n  return isNull(input) || !isObj(input)\n    ? input\n    : Object.keys(input)\n      .sort()\n      .reduce(\n        /**\n          @param {PlainObject} output\n\n          @param {string} key\n\n          @returns {PlainObject}\n         */\n        function (output, key) {\n          output[key] = sortJSON(input[key])\n\n          return output\n        },\n        emptyObj(input)\n      )\n}\n","/**\n  Checks if `value` is `fontFamily`.\n\n  @param {any} [value]\n  - The string to check.\n\n  @returns {boolean}\n    Returns `true` if `value` is `fontFamily`, else `false`.\n */\n\nexport function isFontFace (value) {\n  return value === \"fontFamily\"\n}\n","import {\n  defaultParams,\n  get,\n  getMedia,\n  getPrefixes,\n  isArr,\n  isFontFace,\n  isStr,\n  kebabCase,\n  merge,\n  replaceVariables\n} from \"../index.js\"\n\n/**\n  Process the `value` when the value is an array.\n\n  @typedef {import (\"..\").Params} Params\n\n  @typedef {import (\"..\").PlainObject} PlainObject\n\n  @param {Params} params\n  - This project's common exchange CSS style object.\n\n  @returns {Params[]}\n    An array of this project's common exchange CSS style objects.\n */\n\nexport function parseFallbacks (params = defaultParams) {\n  const media = getMedia(get(params, \"conditional.media\"))\n  const property = params.property\n  let value = params.value\n\n  const prefixes = getPrefixes()\n  const hasPrefix =\n    isStr(property) && Object.keys(prefixes).indexOf(property) >= 0\n\n  if (\n    isStr(property) &&\n    !isFontFace(property) &&\n    (isArr(value) || hasPrefix)\n  ) {\n    let block\n\n    if (isArr(value)) {\n      value = value.map(function (fallback) {\n        return replaceVariables(fallback, media)\n      })\n\n      block = (/^background[IPRS]/u).test(property)\n        ? [\n          {\n            [kebabCase(property)]: value.join(\",\")\n          }\n        ]\n        : value.map(\n          /**\n            @param {string | number} fallback\n           */\n          function (fallback) {\n            return {\n              [kebabCase(property)]: fallback\n            }\n          }\n        )\n    }\n\n    if (hasPrefix) {\n      block = prefixes[property]\n        .map(\n          /**\n            @param {string} prefix\n           */\n          function (prefix) {\n            return { [kebabCase(prefix + property)]: value }\n          }\n        )\n        .concat({ [kebabCase(property)]: value })\n    }\n\n    return [\n      /** @type {Params} */ (merge(\n        params,\n        { \"block\": undefined, \"value\": undefined },\n        { block, value }\n      ))\n    ]\n  }\n\n  return [params]\n}\n","import { isObj, merge, setStore, store } from \"../index.js\"\n\n/**\n  Returns default prefix strings and user provided prefixes.\n\n  @typedef {import (\"..\").PlainObject} PlainObject\n\n  @param {string} [media]\n  - Media query string.\n\n  @returns {PlainObject}\n    An object containing prefix strings.\n */\n\nexport function getPrefixes (media = \"\") {\n  const Moz = \"Moz-\"\n  const Ms = \"Ms-\"\n  const O = \"O-\"\n  const Webkit = \"Webkit-\"\n\n  setStore(media)\n\n  const variable = store.get(media).get(\"$prefixes\")\n\n  return merge(\n    {\n      \"appearance\": [Webkit, Moz],\n      \"hyphens\": [Webkit, Ms],\n      \"tabSize\": [Moz, O],\n      \"userSelect\": [Webkit, Moz, Ms]\n    },\n    isObj(variable) ? variable.value : {}\n  )\n}\n","/*\n  eslint-disable\n    dot-notation\n */\n\nimport {\n  defaultParams,\n  get,\n  getIdentifier,\n  isArr,\n  isFontFace,\n  isObj,\n  kebabCase,\n  merge,\n  toPairs,\n  uniq\n} from \"../index.js\"\n\n/**\n  Process the `property` when the key is `fontFamily`.\n\n  @typedef {import (\"..\").Params} Params\n\n  @param {Params} params\n  - This project's common exchange CSS style object.\n\n  @returns {Params[]}\n    An array of this project's common exchange CSS style objects.\n */\n\nexport function parseFontFace (params = defaultParams) {\n  const property = params.property\n\n  if (isFontFace(property)) {\n    const media = get(params, \"conditional.media\")\n    const input = params.value\n    const selectors = [[\"@font-face\"]]\n\n    const identifier = /** @type {string} */ (getIdentifier(\n      /** @type {Params} */ (merge(\n        params,\n        { \"selectors\": undefined },\n        { selectors }\n      ))\n    ))\n\n    if (isObj(input)) {\n      // @ts-ignore\n      const fontFamily = input[\"fontFamily\"]\n\n      const value = fontFamily || identifier\n\n      // @ts-ignore\n      input[\"fontFamily\"] = value\n\n      const font = {\n        \"block\": toPairs(input).map(function (style) {\n          return { [kebabCase(style[0])]: style[1] }\n        }),\n        \"emit\": false,\n        identifier,\n        property,\n        selectors,\n        value\n      }\n\n      const rule = {\n        \"block\": [{ \"font-family\": value }],\n        \"conditional\": { media },\n        \"emit\": true,\n        identifier,\n        property,\n        \"selectors\": [[\".\".concat(identifier)]],\n        value\n      }\n\n      return [font, rule]\n    } else if (isArr(input)) {\n      /** @type {Params[]} */\n      const styles = []\n      const block = [\n        {\n          \"font-family\": uniq(\n            input.reduce(\n              /**\n                Process `value` when `property` is `fontFamily`.\n\n                @typedef {import (\"..\").PlainObject} PlainObject\n\n                @param {any[]} fonts\n                - An array of font object and string styles.\n\n                @param {string | PlainObject} value\n                - A font style.\n\n                @returns {any[]}\n                  An array of font styles.\n               */\n\n              function (fonts, value) {\n                if (isObj(value)) {\n                  const font = /** @type {Params} */ (parseFontFace({\n                    property,\n                    value\n                  }).shift())\n\n                  styles.push(font)\n                  return fonts.concat(font.value)\n                }\n\n                return fonts.concat(value)\n              },\n              []\n            )\n          ).join(\",\")\n        }\n      ]\n\n      return styles.concat(\n        merge(params, { \"block\": undefined }, { block })\n      )\n    }\n  }\n\n  return [params]\n}\n","/*\n  eslint-disable\n    max-lines-per-function\n */\n\nimport {\n  defaultParams,\n  get,\n  getIdentifier,\n  getMedia,\n  isArr,\n  isPlaceholder,\n  isProperty,\n  isStr,\n  isUndef,\n  kebabCase,\n  merge,\n  store\n} from \"../index.js\"\n\n/**\n  Create `identifier` from `media`, `selectors`, and `value`.\n\n  @typedef {import (\"..\").Params} Params\n\n  @param {Params} params\n  - This project's common exchange CSS style object.\n\n  @param {string} [group]\n  - Unique grouping ID string.\n\n  @param {boolean} [prime]\n  - True: Primary loop. False: Recursive loop.\n\n  @returns {Params[]}\n    An array of this project's common exchange CSS style objects.\n */\n\nexport function parseProperties (\n  params = defaultParams,\n  group = \"\",\n  prime\n) {\n  const property = /** @type {string} */ (params.property)\n\n  if (prime && !isPlaceholder(property)) {\n    if (!isProperty(property)) {\n      console.info(\n        [\n          \"The key '\",\n          property,\n          \"' is unknown. This could be a typo or a property that is \",\n          \"novel, vendor-specific, or non-standard.\"\n        ].join(\"\")\n      )\n    }\n\n    let emit = params.emit\n    const media = getMedia(get(params, \"conditional.media\"))\n    const value = params.value\n\n    let identifier = /** @type {string} */ (isUndef(params.identifier)\n      ? getIdentifier(params)\n      : params.identifier)\n\n    let selectors = params.selectors || []\n\n    selectors = selectors.length\n      ? selectors.map(\n        /**\n          Prepend `identifier` to `selectors` with pseudo-classes.\n\n          @param {string[]} selector\n          - Array of selector strings.\n\n          @returns {string[]}\n            Array of selector strings.\n         */\n\n        function (selector) {\n          return isStr(identifier) &&\n              isStr(selector[0]) &&\n              (/^:(?!root|where)/u).test(selector[0])\n            ? [\".\".concat(identifier)].concat(selector)\n            : selector\n        }\n      )\n      : selectors.concat([[\".\".concat(identifier)]])\n\n    if (\n      isArr(selectors) &&\n      store.has(media) &&\n      store.get(media).has(group)\n    ) {\n      /** @type {string[]} */\n      let identifiers = []\n\n      const needsNewId = Boolean(\n        selectors.filter(function (selector) {\n          return selector.indexOf(\"&\") >= 0\n        }).length\n      )\n\n      selectors = selectors.map(function (selector) {\n        const i = selector.indexOf(\"&\")\n\n        /** @type {string[]} */\n        const results = []\n\n        if (i >= 0) {\n          const key = selector.join(\"\")\n\n          const declarations = store\n            .get(media)\n            .get(group)\n            .get(key)\n\n          identifier = /** @type {string} */ (getIdentifier({\n            \"conditional\": params.conditional,\n            \"property\": \"&\",\n            \"selectors\": [selector],\n            \"value\": declarations.filter(Boolean).join(\";\")\n          }))\n\n          identifiers = identifiers.concat(identifier)\n\n          emit = true\n\n          return results.concat(\n            selector.slice(0, i),\n            \".\".concat(identifier),\n            selector.slice(i + 1)\n          )\n        }\n\n        return selector\n      })\n\n      if (needsNewId) {\n        identifier = identifiers.filter(Boolean).join(\" \")\n      }\n    }\n\n    const block = params.block || [{ [kebabCase(property)]: value }]\n\n    return [\n      /** @type {Params} */ (merge(\n        params,\n        { \"block\": undefined, \"selectors\": undefined },\n        { block, emit, identifier, selectors }\n      ))\n    ]\n  }\n\n  return [params]\n}\n","import { getPropertyId, isStr } from \"../index.js\"\n\n/**\n  Checks if `value` is a valid CSS property.\n\n  @param {any} [value]\n  - The value to check.\n\n  @returns {boolean}\n    Returns `true` if `value` is a valid CSS property, else `false`.\n */\n\nexport function isProperty (value) {\n  if (isStr(value)) {\n    const lo = getPropertyId(\"\")\n    const hi = getPropertyId(\"&\")\n\n    const propertyId = getPropertyId(value)\n\n    return propertyId > lo && propertyId < hi\n  }\n\n  return false\n}\n","import { isObj, merge, setStore, store } from \"../index.js\"\n\n/**\n  Returns conditional shorthand keys and user provided shorthand variables.\n\n  @typedef {import (\"..\").PlainObject} PlainObject\n\n  @param {\"media\" | \"supports\"} rule\n  - Conditional group rule string.\n\n  @param {string} [media]\n  - Media query string.\n\n  @returns {PlainObject}\n    An object containing shorthand keys and the features they represent.\n */\n\nexport function getConditionals (rule = \"media\", media = \"\") {\n  setStore(media)\n\n  const variable = store.get(media).get(\"$\" + rule)\n\n  const pO = \"(\"\n  const maxW = \"maxWidth\"\n  const minW = \"minWidth\"\n  const colon = \":\"\n  const px = \"px\"\n  const pC = \")\"\n  const dpr = \"WebkitMinDevicePixelRatio\"\n  const comma = \",\"\n  const minR = \"minResolution\"\n  const dpi = \"dpi\"\n  const orientation = \"orientation\"\n  const landscape = \"landscape\"\n  const portrait = \"portrait\"\n  const pcs = \"prefersColorScheme\"\n  const light = \"light\"\n  const dark = \"dark\"\n  const prm = \"prefersReducedMotion\"\n  const prt = \"prefersReducedTransparency\"\n  const reduce = \"reduce\"\n  const Print = \"print\"\n  const Skreen = \"screen\"\n\n  return merge(\n    rule === \"media\"\n      ? {\n        \"_\": \"\",\n        \"Dk\": pO + pcs + colon + dark + pC,\n        \"L\": pO + orientation + colon + landscape + pC,\n        \"Lt\": pO + pcs + colon + light + pC,\n        \"Md\": pO + minW + colon + 768 + px + pC,\n        \"P\": pO + orientation + colon + portrait + pC,\n        \"Pr\": Print,\n        \"Prm\": pO + prm + colon + reduce + pC,\n        \"Prt\": pO + prt + colon + reduce + pC,\n        \"R\":\n            pO +\n            dpr +\n            colon +\n            2 +\n            pC +\n            comma +\n            pO +\n            minR +\n            colon +\n            192 +\n            dpi +\n            pC,\n        \"Sc\": Skreen,\n        \"Sm\": pO + maxW + colon + 767.98 + px + pC\n      }\n      : {},\n    isObj(variable) ? variable.value : {}\n  )\n}\n","import { getIdentifier } from \"../index.js\"\n\n/**\n  Assign an identifier to selectors that begin with `%`.\n\n  @param {string[]} selectors\n  - An array of selector strings.\n\n  @param {string[]} [media]\n  - A media query string.\n\n  @returns {string[]}\n    An array of selector strings.\n */\n\nexport function getPlaceholders (selectors = [], media) {\n  return selectors.map(function (selector) {\n    if ((/^%/u).test(selector)) {\n      const identifier = /** @type {string} */ (getIdentifier({\n        \"conditional\": { media },\n        \"property\": selector,\n        \"value\": selector\n      }))\n\n      return \".\".concat(identifier)\n    }\n\n    return selector\n  })\n}\n","import { getConditionals, isObj, isStr } from \"../index.js\"\n\n/**\n  Checks if `key` is a conditional group rule or shorthand query.\n\n  @param {\"media\" | \"supports\"} rule\n  - Conditional group rule string.\n\n  @param {string} value\n  - The value to check.\n\n  @returns {boolean}\n    Returns `true` if `value` is a conditional query, else `false`.\n */\n\nfunction testRule (rule, value) {\n  return (\n    new RegExp(\"^@\" + rule, \"u\").test(value) ||\n    Object.keys(getConditionals(rule)).indexOf(value) >= 0\n  )\n}\n\n/**\n  Checks if `value` is a conditional group declaration.\n\n  @param {\"media\" | \"supports\"} rule\n  - Conditional group rule string.\n\n  @param {any} [value]\n  - The value to check.\n\n  @param {any} [property]\n  - The property to check.\n\n  @returns {boolean}\n    Returns `true` if `value` is a conditional query, else `false`.\n */\n\nexport function isConditional (rule, value, property) {\n  if (!isObj(value)) {\n    return false\n  }\n\n  if (isStr(property)) {\n    return testRule(rule, property)\n  }\n\n  return Object.keys(value).some(function (key) {\n    return testRule(rule, key)\n  })\n}\n","import { isStr } from \"../index.js\"\n\n/**\n  Checks if `value` is a placeholder.\n\n  @param {any} [value]\n  - The value to check.\n\n  @returns {boolean}\n    Returns `true` if `value` is a placeholder, else `false`.\n */\n\nexport function isPlaceholder (value) {\n  return isStr(value) && (/^%[A-Za-z]+$/u).test(value)\n}\n","/*\n  eslint-disable\n    max-lines-per-function\n */\n\nimport {\n  defaultParams,\n  flattenInput,\n  merge,\n  modifyNumbers,\n  parseConditional,\n  parseFallbacks,\n  parseFontFace,\n  parseInput,\n  parseKeyframes,\n  parsePlaceholder,\n  parseProperties,\n  parseSelectors,\n  parseSelfSelector,\n  parseTypeSelector\n} from \"../index.js\"\n\n/**\n  Process raw styles into this project's common exchange CSS style objects.\n\n  @typedef {import (\"..\").Params} Params\n\n  @typedef {import (\"..\").PlainObject} PlainObject\n\n  @param {PlainObject} params\n  - This project's common exchange CSS style object.\n\n  @param {string} [group]\n  - Unique grouping ID string.\n\n  @param {boolean} [prime]\n  - True: Primary loop. False: Recursive loop.\n\n  @returns {Params[]}\n    An array of this project's common exchange CSS style objects.\n */\n\nexport function parse (params = defaultParams, group = \"\", prime) {\n  const input = /** @type {Params} */ (merge(\n    params,\n    { \"input\": undefined },\n    { \"input\": flattenInput(params) }\n  ))\n\n  return parseInput(input, group)\n    .reduce(\n      /**\n        @param {Params[]} styles\n\n        @param {Params} style\n\n        @returns {Params[]}\n       */\n      function (styles, style) {\n        return styles.concat(parseConditional(style, \"media\", group))\n      },\n      []\n    )\n    .reduce(\n      /**\n        @param {Params[]} styles\n\n        @param {Params} style\n\n        @returns {Params[]}\n       */\n      function (styles, style) {\n        return styles.concat(\n          parseConditional(style, \"supports\", group)\n        )\n      },\n      []\n    )\n    .reduce(\n      /**\n        @param {Params[]} styles\n\n        @param {Params} style\n\n        @returns {Params[]}\n       */\n      function (styles, style) {\n        return styles.concat(parseSelectors(style, group))\n      },\n      []\n    )\n    .reduce(\n      /**\n        @param {Params[]} styles\n\n        @param {Params} style\n\n        @returns {Params[]}\n       */\n      function (styles, style) {\n        return styles.concat(parseTypeSelector(style, group))\n      },\n      []\n    )\n    .reduce(\n      /**\n        @param {Params[]} styles\n\n        @param {Params} style\n\n        @returns {Params[]}\n       */\n      function (styles, style) {\n        return styles.concat(parsePlaceholder(style))\n      },\n      []\n    )\n    .reduce(\n      /**\n        @param {Params[]} styles\n\n        @param {Params} style\n\n        @returns {Params[]}\n       */\n      function (styles, style) {\n        return styles.concat(modifyNumbers(style))\n      },\n      []\n    )\n    .reduce(\n      /**\n        @param {Params[]} styles\n\n        @param {Params} style\n\n        @returns {Params[]}\n       */\n      function (styles, style) {\n        return styles.concat(parseKeyframes(style))\n      },\n      []\n    )\n    .reduce(\n      /**\n        @param {Params[]} styles\n\n        @param {Params} style\n\n        @returns {Params[]}\n       */\n      function (styles, style) {\n        return styles.concat(parseFontFace(style))\n      },\n      []\n    )\n    .reduce(\n      /**\n        @param {Params[]} styles\n\n        @param {Params} style\n\n        @returns {Params[]}\n       */\n      function (styles, style) {\n        return styles.concat(parseFallbacks(style))\n      },\n      []\n    )\n    .reduce(\n      /**\n        @param {Params[]} styles\n\n        @param {Params} style\n\n        @returns {Params[]}\n       */\n      function (styles, style) {\n        return styles.concat(parseSelfSelector(style, group, prime))\n      },\n      []\n    )\n    .reduce(\n      /**\n        @param {Params[]} styles\n\n        @param {Params} style\n\n        @returns {Params[]}\n       */\n      function (styles, style) {\n        return styles.concat(parseProperties(style, group, prime))\n      },\n      []\n    )\n}\n","import {\n  camelCase,\n  defaultParams,\n  get,\n  isConditional,\n  isUndef,\n  mergeArrOfObj,\n  parseConditional,\n  toPairs\n} from \"../index.js\"\n\n/**\n  Process the `input` property of a CSS style object.\n\n  @typedef {import (\"..\").Params} Params\n\n  @param {Params} params\n  - This project's common exchange CSS style object.\n\n  @param {string} [group]\n  - Unique grouping ID string.\n\n  @returns {Params[]}\n    An array of this project's common exchange CSS style objects.\n */\n\nexport function parseInput (params = defaultParams, group = \"\") {\n  const conditional = get(params, \"conditional\", {})\n  const emit = isUndef(params.emit) ? true : params.emit\n  const input = mergeArrOfObj(params.input)\n  const selectors = params.selectors\n\n  if (isConditional(\"media\", input)) {\n    return parseConditional(\n      {\n        conditional,\n        emit,\n        \"property\": params.property,\n        selectors,\n        \"value\": input\n      },\n      \"media\",\n      group\n    )\n  } else if (isConditional(\"supports\", input)) {\n    return parseConditional(\n      {\n        conditional,\n        emit,\n        \"property\": params.property,\n        selectors,\n        \"value\": input\n      },\n      \"supports\",\n      group\n    )\n  }\n\n  return toPairs(input).map(function (style) {\n    const property = style[0]\n    const value = style[1]\n\n    return {\n      conditional,\n      emit,\n      \"property\": camelCase(property),\n      selectors,\n      value\n    }\n  })\n}\n","import {\n  defaultParams,\n  get,\n  getAncestors,\n  getPlaceholders,\n  getSelectors,\n  isArr,\n  isObj,\n  isSelector,\n  kebabCase,\n  merge,\n  parse\n} from \"../index.js\"\n\n/**\n  Parse selectors from `property` keys.\n\n  @typedef {import (\"..\").Params} Params\n\n  @typedef {import (\"..\").PlainObject} PlainObject\n\n  @param {Params} params\n  - This project's common exchange CSS style object.\n\n  @param {string} [group]\n  - Unique grouping ID string.\n\n  @returns {Params[]}\n    An array of this project's common exchange CSS style objects.\n */\n\nexport function parseSelectors (params = defaultParams, group = \"\") {\n  const property = /** @type {string} */ (params.property)\n  const input = params.value\n\n  if (isSelector(property) && isObj(input)) {\n    const emit = (/^:/u).test(property)\n    const media = get(params, \"conditional.media\")\n\n    /** @type {string[][]} */\n    const selectors = getSelectors(kebabCase(property))\n      .reduce(\n        /**\n          Combine array of `selectors` with array of `ancestors`.\n\n          @param {string[][]} a\n          - An array of selector strings.\n\n          @param {string[]} b\n          - An array of selector strings.\n\n          @returns {string[][]}\n            An array of selector strings.\n         */\n\n        function (a, b) {\n          return a.concat(\n            getAncestors(\n              isArr(params.selectors) ? params.selectors : [],\n              [b]\n            )\n          )\n        },\n        []\n      )\n      .reduce(\n        /**\n          Replace placeholders with their hashed equivalent.\n\n          @param {string[][]} a\n          - An array of selector strings.\n\n          @param {string[]} b\n          - An array of selector strings.\n\n          @returns {string[][]}\n            An array of selector strings.\n         */\n\n        function (a, b) {\n          return a.concat([getPlaceholders(b)])\n        },\n        []\n      )\n\n    const noAncestors = Object.keys(input).every(function (item) {\n      return !(/&/u).test(item)\n    })\n\n    if (noAncestors) {\n      return /** @type {Params[]} */ (merge(\n        parse(\n          { \"conditional\": { media }, \"emit\": false, input },\n          group,\n          false\n        ),\n        parse(\n          { \"conditional\": { media }, emit, input, selectors },\n          group,\n          false\n        )\n      ))\n    }\n\n    return parse(\n      { \"conditional\": { media }, emit, input, selectors },\n      group,\n      false\n    )\n  }\n\n  return [params]\n}\n","import { isStr } from \"../index.js\"\n\n/**\n  Checks if `value` contains selectors.\n\n  @param {any} [value]\n  - The value to check.\n\n  @returns {boolean}\n    Returns `true` if `value` contains selectors, else `false`.\n */\n\nexport function isSelector (value) {\n  return isStr(value) && (/([#$%&*+,.>[^~]|:[a-z])/u).test(value)\n}\n","import { isArr } from \"../index.js\"\n\n/**\n  Process a string of CSS selectors.\n\n  @param {string} selectors\n  - A string of CSS selectors.\n\n  @returns {string[][]}\n    An array of an array of selectors.\n */\n\nexport function getSelectors (selectors = \"\") {\n  const identifier =\n    \"-?[A-Z_a-z\\\\u{00a0}-\\\\u{ffff}]+[-0-9A-Z_a-z\\\\u{00a0}-\\\\u{ffff}]*\"\n\n  const regex = new RegExp(\n    [\n      \"(&)\",\n\n      \"(#\".concat(identifier, \")\"),\n\n      \"(\\\\.\".concat(identifier, \")\"),\n      \"(\\\\$\".concat(identifier, \")\"),\n      \"(%\".concat(identifier, \")\"),\n      \"(\\\\^\".concat(identifier, \")\"),\n      \"(\\\\[[-$*0-9=A-Z^_a-z|~\\\\u{00a0}-\\\\u{ffff}]+\\\\])\",\n      \"(::?\".concat(\n        \"(?:\",\n        identifier,\n        \"|\\\\([^)]+\\\\)|[+]|[0-9])+\",\n        \")\"\n      ),\n\n      \"(\".concat(identifier, \")\"),\n\n      \"(\\\\*)\",\n\n      \"([ +>~]+)\"\n    ].join(\"|\"),\n    \"gu\"\n  )\n\n  return selectors.split(/,(?![^(]*\\))/u).map(function (selector) {\n    const matches = selector.trim().match(regex)\n\n    return isArr(matches)\n      ? matches.map(function (str) {\n        return str.trim().replace(/^$/u, \" \")\n      })\n      : []\n  })\n}\n","/**\n  Combine array of `selectors` with array of `ancestors`.\n\n  @param {string[][]} ancestors\n  - Array of ancestor selectors wrapped in a single array.\n\n  @param {string[][]} selectors\n  - Array of selector strings wrapped in a single array.\n\n  @returns {string[][]}\n    Array of selector strings wrapped in a single array.\n */\n\nexport function getAncestors (ancestors = [], selectors = []) {\n  return selectors.reduce(\n    /**\n      Iterate through `selectors` and for each ancestor, if the ancestor\n      location is specified using the `&` character, splice the ancestor\n      array with the `selector`. If no ancestors are specified, return\n      the selector array as is.\n\n      @param {string[][]} results\n      - Array of selector strings wrapped in a single array.\n\n      @param {string[]} selector\n      - Array of selector strings.\n\n      @returns {string[][]}\n        Array of selector strings wrapped in a single array.\n     */\n\n    function (results, selector) {\n      if (ancestors.length) {\n        const index = selector.indexOf(\"&\")\n\n        /** @param {string[]} ancestor */\n        ancestors.forEach(function (ancestor) {\n          results.push(\n            index < 0\n              ? ancestor.concat(\" \", selector)\n              : selector\n                .slice(0, index)\n                .concat(ancestor, selector.slice(index + 1))\n          )\n        })\n      } else {\n        results.push(selector)\n      }\n\n      return results\n    },\n    []\n  )\n}\n","import {\n  defaultParams,\n  get,\n  isObj,\n  isTypeSelector,\n  merge,\n  parse\n} from \"../index.js\"\n\n/**\n  Process type selectors from `property` keys.\n\n  @typedef {import (\"..\").Params} Params\n\n  @typedef {import (\"..\").PlainObject} PlainObject\n\n  @param {Params} params\n  - This project's common exchange CSS style object.\n\n  @param {string} [group]\n  - Unique grouping ID string.\n\n  @returns {Params[]}\n    An array of this project's common exchange CSS style objects.\n */\n\nexport function parseTypeSelector (params = defaultParams, group) {\n  const property = /** @type {string} */ (params.property)\n  const value = params.value\n\n  if (isTypeSelector(property) && isObj(value)) {\n    const emit = false\n    const input = value\n    const media = get(params, \"conditional.media\")\n\n    return /** @type {Params[]} */ (merge(\n      parse({ \"conditional\": { media }, emit, input }, group, false),\n      parse(\n        {\n          \"conditional\": { media },\n          emit,\n          input,\n          \"selectors\": [[property]]\n        },\n        group,\n        false\n      )\n    ))\n  }\n\n  return [params]\n}\n","import { isStr } from \"../index.js\"\n\n/**\n  Checks if `value` is a type selector.\n\n  @param {any} [value]\n  - The value to check.\n\n  @returns {boolean}\n    Returns `true` if `value` is a type selector, else `false`.\n */\n\nexport function isTypeSelector (value) {\n  return isStr(value) && (/^[a-z]+$/u).test(value)\n}\n","import {\n  defaultParams,\n  get,\n  getIdentifier,\n  isPlaceholder,\n  merge\n} from \"../index.js\"\n\n/**\n  Replace placeholder selector with hashed identifier.\n\n  @typedef {import (\"..\").Params} Params\n\n  @param {Params} params\n  - This project's common exchange CSS style object.\n\n  @returns {Params[]}\n    An array of this project's common exchange CSS style objects.\n */\n\nexport function parsePlaceholder (params = defaultParams) {\n  const property = /** @type {string} */ (params.property)\n\n  if (isPlaceholder(property)) {\n    const media = get(params, \"conditional.media\")\n    const value = params.value\n\n    const identifier = getIdentifier({\n      \"conditional\": { media },\n      property,\n      \"value\": property\n    })\n\n    const result = /** @type {Params} */ (merge(params, {\n      identifier\n    }))\n\n    return value === true\n      ? [result]\n      : [\n        /** @type {Params} */ (merge(result, {\n          \"emit\": true,\n          \"input\": { [property]: true },\n          \"value\": true\n        })),\n        /** @type {Params} */ (merge(result, {\n          \"emit\": false,\n          \"input\": value\n        }))\n      ]\n  }\n\n  return [params]\n}\n","import { defaultParams, isNum, isStr, merge } from \"../index.js\"\n\n/**\n  Process numbers in the `value` property of a CSS style object.\n\n  @typedef {import (\"..\").Params} Params\n\n  @param {Params} params\n  - This project's common exchange CSS style object.\n\n  @returns {Params[]}\n    An array of this project's common exchange CSS style objects.\n */\n\nexport function modifyNumbers (params = defaultParams) {\n  const property = params.property\n  const value = params.value\n\n  const regex =\n    /* eslint-disable-next-line max-len */\n    /(animationIterationCount|borderImage(?:Outset|Slice|Width)|box(?:(?:Flex)(?:Group)?|OrdinalGroup)|column(?:Count|s)|fillOpacity|floodOpacity|stopOpacity|stroke(?:Dash(?:array|offset)|Miterlimit|Opacity|Width)|flex(?:Grow|Positive|Shrink|Negative|Order)?\\b|grid(?:Area|Column(?:End|Start)?|Row(?:End|Start)?)|fontWeight|line(?:Clamp|Height)|opacity|\\border|orphans|tabSize|widows|zIndex|zoom)/u\n\n  if (\n    isNum(value) &&\n    value !== 0 &&\n    isStr(property) &&\n    !regex.test(property)\n  ) {\n    return [\n      /** @type {Params} */ (merge(params, {\n        \"value\": \"\".concat(value.toString(), \"px\")\n      }))\n    ]\n  }\n\n  return [params]\n}\n","import {\n  defaultParams,\n  get,\n  getIdentifier,\n  isObj,\n  isStr,\n  kebabCase,\n  merge,\n  toPairs\n} from \"../index.js\"\n\n/**\n  Process the `property` when the key is `animationName`.\n\n  @typedef {import (\"..\").Params} Params\n\n  @typedef {import (\"..\").PlainObject} PlainObject\n\n  @param {Params} params\n  - This project's common exchange CSS style object.\n\n  @returns {Params[]}\n    An array of this project's common exchange CSS style objects.\n */\n\nexport function parseKeyframes (params = defaultParams) {\n  const property = params.property\n  const input = /** @type {PlainObject} */ (params.value)\n\n  if (property === \"animationName\" && isObj(input)) {\n    const media = get(params, \"conditional.media\")\n    const selectors = [\"@keyframes\", \" \"]\n\n    const identifier = /** @type {string} */ (getIdentifier(\n      /** @type {Params} */ (merge(\n        params,\n        { \"selectors\": undefined },\n        { \"selectors\": [selectors] }\n      ))\n    ))\n\n    const anim = /** @type {Params} */ ({\n      \"block\": toPairs(input)\n        .map(\n          /**\n            @param {[string, any]} style\n\n            @returns {PlainObject | false}\n           */\n          function (style) {\n            const prop = style[0]\n\n            return isStr(prop) && { [kebabCase(prop)]: style[1] }\n          }\n        )\n        .filter(Boolean),\n      \"emit\": false,\n      identifier,\n      property,\n      \"selectors\": [selectors.concat(identifier)],\n      \"value\": identifier\n    })\n\n    const rule = {\n      \"block\": [{ \"animation-name\": identifier }],\n      \"conditional\": { media },\n      \"emit\": true,\n      identifier,\n      property,\n      \"selectors\": [[\".\".concat(identifier)]],\n      \"value\": identifier\n    }\n\n    return [anim, rule]\n  }\n\n  return [params]\n}\n","import {\n  defaultParams,\n  get,\n  getMedia,\n  getPropertyId,\n  isArr,\n  isStr,\n  setStore,\n  store\n} from \"../index.js\"\n\n/**\n  Process `selectors` containing `&` but no ancestors.\n\n  @typedef {import (\"..\").Params} Params\n\n  @param {Params} params\n  - This project's common exchange CSS style object.\n\n  @param {string} [group]\n  - Unique grouping ID string.\n\n  @param {boolean} [prime]\n  - True: Primary loop. False: Recursive loop.\n\n  @returns {Params[]}\n    Array of selector strings wrapped in a single array.\n */\n\nexport function parseSelfSelector (\n  params = defaultParams,\n  group = \"\",\n  prime\n) {\n  const property = params.property\n  const selectors = params.selectors\n\n  if (prime && isStr(property) && isArr(selectors)) {\n    const media = getMedia(get(params, \"conditional.media\"))\n\n    setStore(media, group)\n\n    selectors.forEach(function (selector) {\n      const i = selector.indexOf(\"&\")\n\n      if (i >= 0) {\n        const value = selector.join(\"\")\n\n        const declarations =\n          store\n            .get(media)\n            .get(group)\n            .get(value) || []\n\n        declarations[getPropertyId(property)] = JSON.stringify(\n          params.value\n        )\n\n        store\n          .get(media)\n          .get(group)\n          .set(value, declarations)\n      }\n    })\n  }\n\n  return [params]\n}\n","import {\n  camelCase,\n  defaultParams,\n  get,\n  getConditionals,\n  isArr,\n  isConditional,\n  isStr,\n  isUndef,\n  merge,\n  parse,\n  toPairs\n} from \"../index.js\"\n\n/**\n  Returns the query list string without the at-rule prefix.\n\n  @param {string} input\n  - The value to format.\n\n  @returns {string}\n    Returns the query list string without the at-rule prefix.\n */\n\nfunction getString (input) {\n  return camelCase(\n    input\n      .slice(input.indexOf(\" \"))\n      .trim()\n      .replace(/: +/u, \":\")\n  )\n}\n\n/**\n  Merge the new `feature` to the `input` object.\n\n  @param {PlainObject} input\n  - The `input` object that should include the `feature`.\n\n  @param {\"media\" | \"supports\"} rule\n  - Conditional group rule string.\n\n  @param {string} feature\n  - The query list string without the at-rule prefix.\n\n  @returns {PlainObject}\n    Returns the `input` object with the `feature` prepended to the array\n  with the `rule` key`.\n */\n\nfunction getObject (input, rule, feature) {\n  return merge(\n    input,\n    { [rule]: undefined },\n    {\n      [rule]: [feature]\n        .concat(isArr(input[rule]) ? input[rule] : [])\n        .filter(Boolean)\n    }\n  )\n}\n\n/**\n  Process the media query `property` object of a CSS style object.\n\n  @typedef {import (\"..\").Params} Params\n\n  @typedef {import (\"..\").PlainObject} PlainObject\n\n  @param {Params} params\n  - This project's common exchange CSS style object.\n\n  @param {\"media\" | \"supports\"} rule\n  - Conditional group rule string.\n\n  @param {string} [group]\n  - Unique grouping ID string.\n\n  @returns {Params[]}\n    An array of this project's common exchange CSS style objects.\n */\n\nexport function parseConditional (\n  params = defaultParams,\n  rule = \"media\",\n  group = \"\"\n) {\n  const property = /** @type {string} */ (params.property)\n  const value = /** @type {PlainObject} */ (params.value)\n\n  if (isConditional(rule, value)) {\n    const emit = params.emit\n    const selectors = params.selectors\n\n    return toPairs(value)\n      .map(function (style) {\n        const key = style[0]\n        const val = style[1]\n\n        const features = getConditionals(rule)\n\n        const feature =\n          isUndef(features[key]) && isConditional(rule, {}, key)\n            ? getString(key)\n            : features[key]\n\n        let conditional = get(params, \"conditional\", { [rule]: [] })\n        let input = { [key]: val }\n\n        if (isStr(feature)) {\n          conditional = getObject(conditional, rule, feature)\n          input = isStr(property) ? { [property]: val } : val\n        }\n\n        return parse(\n          { conditional, emit, input, property, selectors },\n          group,\n          false\n        )\n      })\n      .reduce(function (styles, style) {\n        return styles.concat(style)\n      }, [])\n  } else if (isConditional(rule, value, property)) {\n    return parse(\n      {\n        \"conditional\": getObject(\n          get(params, \"conditional\", { [rule]: [] }),\n          rule,\n          getString(property)\n        ),\n        \"input\": value\n      },\n      group,\n      false\n    )\n  }\n\n  return [params]\n}\n","/**\n  @typedef {import (\"..\").Params} Params\n\n  @type {Params}\n */\n\nexport const defaultParams = {\n  \"block\": undefined,\n  \"conditional\": undefined,\n  \"emit\": undefined,\n  \"identifier\": undefined,\n  \"input\": undefined,\n  \"property\": undefined,\n  \"selectors\": undefined,\n  \"value\": undefined\n}\n","import {\n  defaultParams,\n  get,\n  getMedia,\n  getPropertyId,\n  isArr,\n  isStr,\n  isUndef,\n  murmurHash\n} from \"../index.js\"\n\n/**\n  Create `identifier` from `media`, `selectors`, and `value`.\n\n  @typedef {import (\"..\").Params} Params\n\n  @param {Params} params\n  - This project's common exchange CSS style object.\n\n  @param {number} size\n  - Number of characters to include in the string hash.\n\n  @returns {string | null}\n    An array of this project's common exchange CSS style objects.\n */\n\nexport function getIdentifier (params = defaultParams, size = 4) {\n  const media = get(params, \"conditional.media\")\n  const property = params.property\n  const selectors = params.selectors\n  const value = params.value\n\n  const identifier = params.identifier\n\n  if (isStr(property)) {\n    const propertyId = getPropertyId(property).toString(36)\n\n    const ruleset = \"\"\n      .concat(getMedia(media))\n      .concat(\n        isArr(selectors)\n          ? selectors\n            .map(function (selector) {\n              return selector.join(\"\")\n            })\n            .join(\",\")\n          : \"\"\n      )\n      .concat(isUndef(value) ? \"\" : JSON.stringify(value))\n\n    const hashString = murmurHash(ruleset).slice(-size)\n\n    return isUndef(identifier) ? propertyId + hashString : identifier\n  }\n\n  return null\n}\n","import { isArr, isStr, kebabCase, uniq } from \"../index.js\"\n\n/**\n  Join array of media queries into a string.\n\n  @param {any} [value]\n  - Array of media query strings.\n\n  @returns {string}\n    Returns a media query string.\n */\n\nexport function getMedia (value) {\n  return isArr(value)\n    ? uniq(\n      value\n        .map(function (s) {\n          return isStr(s) ? s.replace(/: +/gu, \":\").trim() : \"\"\n        })\n        .map(kebabCase)\n        .filter(Boolean)\n    )\n      .sort()\n      .join(\" and \")\n    : \"\"\n}\n","import { camelCase } from \"../index.js\"\n\n/**\n  Returns a number assigned to a CSS property name.\n\n  @param {string} [value]\n  - Property name/identifier specifying a stylistic CSS feature to change.\n\n  @returns {number}\n    The number assigned to the `propertyName` input.\n\n  @see https://www.w3.org/Style/CSS/all-properties.en.html\n */\n\nexport function getPropertyId (value) {\n  const property = String(value)\n  const n = parseInt(\"af\", 36)\n\n  switch (true) {\n    case (/^\\x2D(\\x2D|[A-Z])/u).test(property):\n      return 0 + n\n    case (/^%/u).test(property):\n      return 517 + n\n    case (/^&$/u).test(property):\n      return 516 + n\n    default:\n      return (\n        \"--*,all,direction,unicodeBidi,writingMode,textOrientation,glyphOrientationVertical,textCombineUpright,textTransform,tabSize,wordBreak,lineBreak,hyphens,overflowWrap,wordWrap,textAlign,textAlignAll,textAlignLast,textJustify,wordSpacing,letterSpacing,textIndent,hangingPunctuation,wordBoundaryDetection,wordBoundaryExpansion,textSpaceCollapse,textSpaceTrim,textWrap,wrapBefore,wrapAfter,wrapInside,whiteSpace,hyphenateCharacter,hyphenateLimitZone,hyphenateLimitChars,hyphenateLimitLines,hyphenateLimitLast,textGroupAlign,linePadding,textSpacing,textDecoration,textDecorationLine,textDecorationThickness,textDecorationStyle,textDecorationColor,textUnderlinePosition,textUnderlineOffset,textDecorationSkip,textDecorationSkipSelf,textDecorationSkipBox,textDecorationSkipInset,textDecorationSkipSpaces,textDecorationSkipInk,textEmphasis,textEmphasisStyle,textEmphasisColor,textEmphasisPosition,textEmphasisSkip,textShadow,font,fontStyle,fontVariant,fontWeight,fontStretch,fontSize,fontFamily,fontSynthesis,fontSynthesisWeight,fontSynthesisStyle,fontSynthesisSmallCaps,fontKerning,fontVariantLigatures,fontVariantPosition,fontVariantCaps,fontVariantNumeric,fontVariantAlternates,fontVariantEastAsian,fontFeatureSettings,fontLanguageOverride,fontOpticalSizing,fontVariationSettings,fontPalette,fontVariantEmoji,fontSizeAdjust,content,quotes,stringSet,bookmarkLevel,bookmarkLabel,bookmarkState,running,footnoteDisplay,footnotePolicy,outline,outlineColor,outlineStyle,outlineWidth,outlineOffset,resize,cursor,caret,caretColor,caretShape,navUp,navRight,navDown,navLeft,userSelect,pointerEvents,accentColor,appearance,position,top,right,bottom,left,inset,insetBlock,insetBlockStart,insetBlockEnd,insetInline,insetInlineStart,insetInlineEnd,display,order,visibility,contain,contentVisibility,width,height,minWidth,minHeight,maxWidth,maxHeight,boxSizing,aspectRatio,containIntrinsicSize,containIntrinsicWidth,containIntrinsicHeight,containIntrinsicBlockSize,containIntrinsicInlineSize,minIntrinsicSizing,zIndex,margin,marginTop,marginRight,marginBottom,marginLeft,marginTrim,padding,paddingTop,paddingRight,paddingBottom,paddingLeft,dominantBaseline,verticalAlign,baselineSource,alignmentBaseline,baselineShift,lineHeight,textEdge,leadingTrim,inlineSizing,initialLetter,initialLetterAlign,initialLetterWrap,listStyle,listStyleImage,listStyleType,listStylePosition,markerSide,counterReset,counterIncrement,counterSet,overflow,overflowX,overflowY,overflowClipMargin,overflowBlock,overflowInline,scrollBehavior,textOverflow,blockEllipsis,lineClamp,scrollbarGutter,continue,maxLines,tableLayout,borderCollapse,borderSpacing,captionSide,emptyCells,flexFlow,flexDirection,flexWrap,flex,flexGrow,flexShrink,flexBasis,placeContent,alignContent,justifyContent,placeSelf,alignSelf,justifySelf,placeItems,alignItems,justifyItems,gap,rowGap,columnGap,columns,columnWidth,columnCount,columnRule,columnRuleWidth,columnRuleStyle,columnRuleColor,columnSpan,columnFill,flowInto,flowFrom,regionFragment,flow,chains,wrapFlow,wrapThrough,page,breakBefore,breakAfter,breakInside,orphans,widows,pageBreakBefore,pageBreakAfter,pageBreakInside,marginBreak,boxDecorationBreak,grid,gridTemplate,gridTemplateRows,gridTemplateColumns,gridTemplateAreas,gridAutoFlow,gridAutoRows,gridAutoColumns,gridArea,gridRow,gridRowStart,gridRowEnd,gridColumn,gridColumnStart,gridColumnEnd,lineGrid,lineSnap,boxSnap,rubyPosition,rubyMerge,rubyAlign,rubyOverhang,blockSize,inlineSize,minBlockSize,minInlineSize,maxBlockSize,maxInlineSize,marginBlock,marginBlockStart,marginBlockEnd,marginInline,marginInlineStart,marginInlineEnd,paddingBlock,paddingBlockStart,paddingBlockEnd,paddingInline,paddingInlineStart,paddingInlineEnd,borderBlock,borderBlockStart,borderBlockEnd,borderInline,borderInlineStart,borderInlineEnd,borderBlockWidth,borderBlockStartWidth,borderBlockEndWidth,borderInlineWidth,borderInlineStartWidth,borderInlineEndWidth,borderBlockStyle,borderBlockStartStyle,borderBlockEndStyle,borderInlineStyle,borderInlineStartStyle,borderInlineEndStyle,borderBlockColor,borderBlockStartColor,borderBlockEndColor,borderInlineColor,borderInlineStartColor,borderInlineEndColor,borderStartStartRadius,borderStartEndRadius,borderEndStartRadius,borderEndEndRadius,floatReference,float,clear,floatDefer,floatOffset,lineHeightStep,blockStep,blockStepSize,blockStepInsert,blockStepAlign,blockStepRound,fillRule,fillBreak,fill,fillColor,fillImage,fillOrigin,fillPosition,fillSize,fillRepeat,fillOpacity,strokeWidth,strokeAlign,strokeLinecap,strokeLinejoin,strokeMiterlimit,strokeBreak,strokeDasharray,strokeDashoffset,strokeDashCorner,strokeDashJustify,stroke,strokeColor,strokeImage,strokeOrigin,strokePosition,strokeSize,strokeRepeat,strokeOpacity,color,opacity,colorScheme,forcedColorAdjust,printColorAdjust,colorAdjust,objectFit,objectPosition,imageOrientation,imageRendering,imageResolution,background,backgroundColor,backgroundImage,backgroundPosition,backgroundSize,backgroundRepeat,backgroundAttachment,backgroundOrigin,backgroundClip,border,borderTop,borderRight,borderBottom,borderLeft,borderWidth,borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth,borderStyle,borderTopStyle,borderRightStyle,borderBottomStyle,borderLeftStyle,borderColor,borderTopColor,borderRightColor,borderBottomColor,borderLeftColor,borderRadius,borderTopLeftRadius,borderTopRightRadius,borderBottomRightRadius,borderBottomLeftRadius,borderImage,borderImageSource,borderImageSlice,borderImageWidth,borderImageOutset,borderImageRepeat,boxShadow,clip,clipPath,clipRule,mask,maskImage,maskPosition,maskSize,maskRepeat,maskOrigin,maskClip,maskComposite,maskMode,maskBorder,maskBorderSource,maskBorderSlice,maskBorderWidth,maskBorderOutset,maskBorderRepeat,maskBorderMode,maskType,shapeOutside,shapeImageThreshold,shapeMargin,shapeInside,borderBoundary,filter,floodColor,floodOpacity,colorInterpolationFilters,lightingColor,mixBlendMode,isolation,backgroundBlendMode,transition,transitionProperty,transitionDuration,transitionTimingFunction,transitionDelay,transform,transformOrigin,transformBox,translate,rotate,scale,transformStyle,perspective,perspectiveOrigin,backfaceVisibility,animation,animationName,animationDuration,animationTimingFunction,animationDelay,animationIterationCount,animationDirection,animationFillMode,animationPlayState,offset,offsetPosition,offsetPath,offsetDistance,offsetRotate,offsetAnchor,willChange,scrollbarColor,scrollbarWidth,scrollSnapType,scrollPadding,scrollPaddingTop,scrollPaddingRight,scrollPaddingBottom,scrollPaddingLeft,scrollPaddingBlock,scrollPaddingBlockStart,scrollPaddingBlockEnd,scrollPaddingInline,scrollPaddingInlineStart,scrollPaddingInlineEnd,scrollMargin,scrollMarginTop,scrollMarginRight,scrollMarginBottom,scrollMarginLeft,scrollMarginBlock,scrollMarginBlockStart,scrollMarginBlockEnd,scrollMarginInline,scrollMarginInlineStart,scrollMarginInlineEnd,scrollSnapAlign,scrollSnapStop,overflowAnchor,overscrollBehavior,overscrollBehaviorX,overscrollBehaviorY,overscrollBehaviorBlock,overscrollBehaviorInline,spatialNavigationContain,spatialNavigationAction,spatialNavigationFunction,voiceVolume,voiceBalance,speak,speakAs,pause,pauseBefore,pauseAfter,rest,restBefore,restAfter,cue,cueBefore,cueAfter,voiceFamily,voiceRate,voicePitch,voiceRange,voiceStress,voiceDuration\"\n          .split(\",\")\n          .indexOf(\n            camelCase(property)\n              .replace(/^(Moz|Ms|Webkit)/u, \"\")\n              .replace(/^([A-Z])/u, function (a) {\n                return a.toLowerCase()\n              })\n          ) + n\n      )\n  }\n}\n","export const store = (function (STORE) {\n  return STORE\n})(new Map())\n","/**\n  Returns the object type of the given value.\n\n  @param {any} value\n  - The value to check.\n\n  @returns {string}\n    The object type of the given value as a string.\n */\n\nexport function getType (value) {\n  return Object.prototype.toString.call(value).slice(8, -1)\n}\n","/*\n  eslint-disable\n    jsdoc/valid-types\n */\n\nimport { getType } from \"../index.js\"\n\n/**\n  Checks if `value` is classified as an `Array` object.\n\n  @param {any} value\n  - The value to check.\n\n  @returns {value is any[]}\n    Returns `true` if `value` is an array, else `false`.\n */\n\nexport function isArr (value) {\n  return getType(value) === \"Array\"\n}\n","/*\n  eslint-disable\n    jsdoc/valid-types\n */\n\nimport { getType } from \"../index.js\"\n\n/**\n  Checks if `value` is classified as an `Array` object.\n\n  @param {any} value\n  - The value to check.\n\n  @returns {value is boolean}\n    Returns `true` if `value` is an array, else `false`.\n */\n\nexport function isBool (value) {\n  return getType(value) === \"Boolean\"\n}\n","/*\n  eslint-disable\n    jsdoc/valid-types\n */\n\n/**\n  Checks if `value` is classified as a `Function` object.\n\n  @typedef {import (\"..\").AnyFunction} AnyFunction\n\n  @param {any} value\n  - The value to check.\n\n  @returns {value is AnyFunction}\n    Returns `true` if `value` is a function, else `false`.\n */\n\nexport function isFn (value) {\n  return typeof value === \"function\"\n}\n","import { isArr, isObj, isStr } from \"../index.js\"\n\n/**\n  Checks if `value` is a valid JSON object.\n\n  @param {any} value\n  - The value to check.\n\n  @returns {boolean}\n    Returns `true` if `value` is a valid JSON object, else `false`.\n */\n\nexport function isJSON (value) {\n  let input = value\n\n  if (!isStr(value)) {\n    input = JSON.stringify(value)\n  }\n\n  try {\n    input = JSON.parse(input)\n\n    return isArr(input) || isObj(input)\n  } catch (_) {\n    return false\n  }\n}\n","/*\n  eslint-disable\n    jsdoc/valid-types\n */\n\nimport { getType } from \"../index.js\"\n\n/**\n  Checks if `value` is `null`.\n\n  @param {any} value\n  - The value to check.\n\n  @returns {value is null}\n    Returns `true` if `value` is `null`, else `false`.\n */\n\nexport function isNull (value) {\n  return getType(value) === \"Null\"\n}\n","/*\n  eslint-disable\n    jsdoc/valid-types\n */\n\nimport { getType } from \"../index.js\"\n\n/**\n  Checks if `value` is classified as a `Number` primitive or object.\n\n  @param {any} value\n  - The value to check.\n\n  @returns {value is number}\n    Returns `true` if `value` is a number, else `false`.\n */\n\nexport function isNum (value) {\n  return getType(value) === \"Number\" && !isNaN(value)\n}\n","/*\n  eslint-disable\n    jsdoc/valid-types\n */\n\nimport { getType } from \"../index.js\"\n\n/**\n  Checks if `value` is the language type of `Object`.\n\n  @typedef {import (\"..\").PlainObject} PlainObject\n\n  @param {any} value\n  - The value to check.\n\n  @returns {value is PlainObject}\n    Returns `true` if `value` is an object, else `false`.\n */\n\nexport function isObj (value) {\n  return getType(value) === \"Object\"\n    ? value.constructor === Object &&\n        Object.getPrototypeOf(value) === Object.prototype\n    : false\n}\n","/*\n  eslint-disable\n    jsdoc/valid-types\n */\n\nimport { getType } from \"../index.js\"\n\n/**\n  Checks if `value` is classified as a `String` primitive or object.\n\n  @param {any} value\n  - The value to check.\n\n  @returns {value is string}\n    Returns `true` if `value` is a string, else `false`.\n */\n\nexport function isStr (value) {\n  return getType(value) === \"String\"\n}\n","/*\n  eslint-disable\n    jsdoc/valid-types\n */\n\nimport { getType } from \"../index.js\"\n\n/**\n  Checks if `value` is classified as a `Symbol` primitive or object.\n\n  @param {any} value\n  - The value to check.\n\n  @returns {value is symbol}\n    Returns `true` if `value` is a symbol, else `false`.\n */\n\nexport function isSym (value) {\n  return getType(value) === \"Symbol\"\n}\n","/*\n  eslint-disable\n    jsdoc/valid-types\n */\n\nimport { getType } from \"../index.js\"\n\n/**\n  Checks if `value` is `undefined`.\n\n  @param {any} [value]\n  - The value to check.\n\n  @returns {value is undefined}\n    Returns `true` if `value` is `undefined`, else `false`.\n */\n\nexport function isUndef (value) {\n  return getType(value) === \"Undefined\"\n}\n","import { isStr } from \"../index.js\"\n\n/**\n  Converts `string` to camel case.\n\n  @param {string} [value]\n  - The string to convert.\n\n  @returns {string}\n    The camel cased string.\n */\n\nexport function camelCase (value) {\n  return isStr(value)\n    ? value.replace(/\\x2D([a-z])/gu, function (_, a) {\n      return a.toUpperCase()\n    })\n    : \"\"\n}\n","/**\n  Creates a debounced function that delays invoking `fn` until after `wait`\n  milliseconds have elapsed since the last time the debounced function was\n  invoked. The `fn` is invoked with the last arguments provided to the\n  debounced function. Subsequent calls to the debounced function return the\n  result of the last `fn` invocation.\n\n  @param {Function} fn\n  - The function to debounce.\n\n  @param {number} wait\n  - The number of milliseconds to delay.\n\n  @returns {Function}\n    The new debounced function.\n */\n\nexport function debounce (fn, wait = 20) {\n  /** @type {number | undefined} */\n  let timeout\n\n  return function () {\n    clearTimeout(timeout)\n    timeout = setTimeout(fn, wait)\n  }\n}\n","import { isArr, isObj, isStr } from \"../index.js\"\n\n/**\n  Gets the value at path of object. If the resolved value is undefined,\n  the defaultValue is returned in its place.\n\n  @param {object} object\n  - The object to query.\n\n  @param {string | string[]} path\n  - The path of the property to get.\n\n  @param {any} [defaultValue]\n  - The value returned for undefined resolved values.\n\n  @returns {any}\n    Returns the resolved value.\n */\n\nexport function get (object, path, defaultValue) {\n  let item\n\n  if (isObj(object)) {\n    item = object\n\n    const paths = isStr(path) ? path.split(\".\") : path\n\n    while (isObj(item) && isArr(paths) && paths.length > 0) {\n      const key = paths.shift()\n\n      if (\n        isObj(item) &&\n        isStr(key) &&\n        Object.prototype.hasOwnProperty.call(item, key)\n      ) {\n        item = item[key]\n      } else {\n        return defaultValue\n      }\n    }\n  }\n\n  return item\n}\n","import { isStr } from \"../index.js\"\n\n/**\n  Converts `string` to kebab case.\n\n  @param {string} [value]\n  - The string to convert.\n\n  @returns {string}\n    The kebab cased string.\n */\n\nexport function kebabCase (value) {\n  return isStr(value)\n    ? value.replace(/[A-Z]|^ms/gu, \"-$&\").toLowerCase()\n    : \"\"\n}\n","/*\n  eslint-disable\n    no-bitwise,\n    no-mixed-operators,\n    no-plusplus\n */\n\n/**\n  Converts `string` to unique hash identifier string.\n  JS Implementation of MurmurHash3 (r136) (as of May 20, 2011).\n\n  @param {string} string\n  - The string on convert.\n\n  @param {number} seed\n  - Positive integer only.\n\n  @returns {string}\n    The string hash identifier.\n\n  @author <a href=\"mailto:aappleby@gmail.com\">Austin Appleby</a>\n\n  @see https://github.com/aappleby/smhasher\n\n  @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n\n  @see https://github.com/garycourt/murmurhash-js\n\n  @copyright 2011 Gary Court\n\n  @license MIT\n */\n\nexport function murmurHash (string = \"\", seed = 4) {\n  const remainder = string.length & 3\n  const bytes = string.length - remainder\n  const c1 = 0xcc9e2d51\n  const c2 = 0x1b873593\n\n  let h1 = seed\n  let i = 0\n\n  let h1b, k1\n\n  while (i < bytes) {\n    k1 =\n      (string.charCodeAt(i) & 0xff) |\n      ((string.charCodeAt(++i) & 0xff) << 8) |\n      ((string.charCodeAt(++i) & 0xff) << 16) |\n      ((string.charCodeAt(++i) & 0xff) << 24)\n    ++i\n\n    k1 =\n      ((k1 & 0xffff) * c1 + ((((k1 >>> 16) * c1) & 0xffff) << 16)) &\n      0xffffffff\n    k1 = (k1 << 15) | (k1 >>> 17)\n    k1 =\n      ((k1 & 0xffff) * c2 + ((((k1 >>> 16) * c2) & 0xffff) << 16)) &\n      0xffffffff\n\n    h1 ^= k1\n    h1 = (h1 << 13) | (h1 >>> 19)\n    h1b =\n      ((h1 & 0xffff) * 5 + ((((h1 >>> 16) * 5) & 0xffff) << 16)) &\n      0xffffffff\n    h1 =\n      (h1b & 0xffff) +\n      0x6b64 +\n      ((((h1b >>> 16) + 0xe654) & 0xffff) << 16)\n  }\n\n  k1 = 0\n\n  switch (remainder) {\n    case 3:\n      k1 ^= (string.charCodeAt(i + 2) & 0xff) << 16\n      break\n    case 2:\n      k1 ^= (string.charCodeAt(i + 1) & 0xff) << 8\n      break\n    case 1:\n      k1 ^= string.charCodeAt(i) & 0xff\n\n      k1 =\n        ((k1 & 0xffff) * c1 + ((((k1 >>> 16) * c1) & 0xffff) << 16)) &\n        0xffffffff\n      k1 = (k1 << 15) | (k1 >>> 17)\n      k1 =\n        ((k1 & 0xffff) * c2 + ((((k1 >>> 16) * c2) & 0xffff) << 16)) &\n        0xffffffff\n      h1 ^= k1\n  }\n\n  h1 ^= string.length\n\n  h1 ^= h1 >>> 16\n  h1 =\n    ((h1 & 0xffff) * 0x85ebca6b +\n      ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) &\n    0xffffffff\n  h1 ^= h1 >>> 13\n  h1 =\n    ((h1 & 0xffff) * 0xc2b2ae35 +\n      ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16)) &\n    0xffffffff\n  h1 ^= h1 >>> 16\n\n  return (h1 >>> 0).toString(36)\n}\n","/*\n  eslint-disable\n    no-bitwise,\n    no-plusplus\n */\n\n/**\n  Generate URL-friendly unique ID. This method uses the non-secure\n  predictable random generator with bigger collision probability.\n\n  @returns {string}\n    A random 21 character string.\n\n  @author <a href=\"mailto:andrey@sitnik.ru\">Andrey Sitnik</a>\n\n  @see https://github.com/ai/nanoid/blob/main/non-secure/index.js\n\n  @copyright 2017 Andrey Sitnik\n\n  @license MIT\n */\n\nexport function nanoid () {\n  const alnum =\n    \"-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz\"\n\n  let id = \"\"\n  let i = 21\n\n  while (i--) {\n    id += alnum[(Math.random() * 64) | 0]\n  }\n\n  return id\n}\n","import { isObj } from \"../index.js\"\n\n/**\n  Creates an array of own enumerable string keyed-value pairs for `object`.\n\n  @typedef {import (\"..\").PlainObject} PlainObject\n\n  @param {PlainObject} [value]\n  - The object to query.\n\n  @returns {[string, any][]}\n    Returns the key-value pairs.\n */\n\nexport function toPairs (value) {\n  return isObj(value)\n    ? Object.keys(value).map(function (key) {\n      return [key, value[key]]\n    })\n    : []\n}\n","import { isArr } from \"../index.js\"\n\n/**\n  Creates a duplicate-free copy of an array of strings.\n\n  @param {string[]} [value]\n  - The array to inspect.\n\n  @returns {string[]}\n    Returns the new duplicate free array.\n */\n\nexport function uniq (value) {\n  return isArr(value)\n    ? value.reduce(\n      /**\n        Append string only if it is not already included.\n\n        @param {string[]} results\n        - The new duplicate free array.\n\n        @param {string} item\n        - The string to check.\n\n        @returns {string[]}\n          Returns the new duplicate free array.\n       */\n\n      function (results, item) {\n        return results.indexOf(item) < 0\n          ? results.concat(item)\n          : results\n      },\n      []\n    )\n    : []\n}\n"],"names":["create","params","toPairs","reduce","styles","style","property","value","isFn","isArr","isObj","css","input","className","group","nanoid","uniq","parse","map","cache","update","getClassName","concat","filter","Boolean","items","item","isStr","split","sort","join","sortFn","a","b","test","localeCompare","media","getMedia","get","selectors","supports","key","getBlockString","length","getSupportsString","setStore","store","has","insertSelector","findIndex","selector","findFn","set","merge","defaultParams","custom","block","sep","rule","results","RegExp","getPropertyId","toString","kebabCase","emit","identifier","getRules","rules","forEach","push","mq","getSelectorsString","isUndef","getStyle","unshift","getStyles","Map","entries","s","replace","trim","canUseDom","window","document","createElement","getStyleElement","attr","query","querySelectorAll","setAttribute","head","appendChild","delete","updateStyles","innerHTML","flattenInput","mergeArrOfObj","mediaStr","isVariable","replaceVariables","val","setVariable","conditional","isShorthand","shorthands","getShorthands","properties","prop","getShorthand","variable","bg","borderX","borderY","m","mb","ml","mr","mt","mx","my","p","pb","pl","pr","pt","px","py","size","Object","keys","indexOf","exact","match","result","paths","shift","assignProp","target","source","propertyIsEnumerable","call","defineProperty","configurable","enumerable","writable","cloneObj","prototype","canMerge","emptyObj","sources","Array","slice","arguments","initial","apply","mergeArr","mergeObj","every","obj","output","getOwnPropertyNames","getOwnPropertySymbols","sortJSON","isNull","isFontFace","parseFallbacks","prefixes","Moz","Webkit","appearance","hyphens","tabSize","userSelect","getPrefixes","hasPrefix","fallback","prefix","undefined","parseFontFace","getIdentifier","fonts","font","parseProperties","prime","isPlaceholder","lo","hi","propertyId","isProperty","identifiers","needsNewId","i","declarations","getConditionals","pO","colon","pC","pcs","_","Dk","L","Lt","Md","P","Pr","Prm","Prt","R","Sc","Sm","getPlaceholders","testRule","isConditional","some","parseConditional","camelCase","parseInput","regex","matches","str","getSelectors","ancestors","index","ancestor","getAncestors","parseSelectors","isTypeSelector","parseTypeSelector","parsePlaceholder","isNum","modifyNumbers","parseKeyframes","JSON","stringify","parseSelfSelector","getString","getObject","feature","features","hashString","murmurHash","String","n","parseInt","toLowerCase","getType","isBool","isJSON","isNaN","constructor","getPrototypeOf","isSym","toUpperCase","debounce","fn","wait","timeout","clearTimeout","setTimeout","object","path","defaultValue","hasOwnProperty","string","seed","remainder","bytes","c1","c2","h1b","k1","h1","charCodeAt","id","Math","random"],"mappings":"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"}